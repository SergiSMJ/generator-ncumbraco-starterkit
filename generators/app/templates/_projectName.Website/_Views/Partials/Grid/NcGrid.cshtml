@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq

@*
    Razor helpers located at the bottom of this file
*@

@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

    <div class="umb-grid">
        @if (oneColumn)
        {
            foreach (var section in Model.sections)
            {
                <div class="grid-section">
                    @foreach (var row in section.rows)
                    {
                        bool fluid = false;
                        bool hero = false;
                        var breakpoint = "md";

                        if (row.config != null)
                        {
                            dynamic containerCfg = Json.Decode(row.config.ToString());
                            fluid = containerCfg.containerClass == "container-fluid";
                            hero = containerCfg.containerClass == "hero";
                            breakpoint = containerCfg.breakpoint;
                        }

                        @renderRow(row, true, fluid, breakpoint, hero);
                    }
                </div>
            }
        }
        else
        {
            <div class="row clearfix">
                @foreach (var section in Model.sections)
                {
                    var breakpoint = "md";
                    if (section.rows.config != null)
                    {
                        dynamic containerCfg = Json.Decode(section.rows.config.ToString());
                        breakpoint = containerCfg.breakpoint.ToString();
                    }
                    <div class="grid-section">
                        <div class="col--@(breakpoint)-@(section.grid) column">
                            @foreach (var row in section.rows)
                            {
                                @renderRow(row, false, false, breakpoint, false);
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@helper renderRow(dynamic row, bool singleColumn, bool fluid, string breakpoint, bool hero)
{
var containerClass = fluid ? "container-fluid" : "container";
var heroClass = hero ? " hero " : "";

    <div class="@row.name.ToString().Replace(" ", "-").ToLower() @heroClass" @RenderElementAttributes(row)>
        @Umbraco.If(singleColumn, "<div class=\"" + containerClass + "\">")
        <div class="row clearfix">
            @foreach (var area in row.areas)
            {
                <div class="col--@(breakpoint)-@(area.grid) column">
                    <div @RenderElementAttributes(area)>
                        @foreach (var control in area.controls)
                        {
                            if (control != null && control.editor != null && control.editor.view != null)
                            {
                                <text>@Html.Partial("grid/editors/base", (object)control)</text>
                            }
                        }
                    </div>
                </div>}
        </div>
        @Umbraco.If(singleColumn, "</div>")
    </div>
}

@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name == "breakpoint") { continue; }
                if (property.Name == "containerClass") { continue; }
                attrs.Add(property.Name + "=\"" + property.Value.ToString() + "\"");
            }

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
                cssVals.Add(property.Name + ":" + property.Value.ToString() + ";");

            if (cssVals.Any())
                attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
}